<%
# -*- mode: R -*-
  strategico.home <- as.character(Sys.getenv("STRATEGICO_HOME"))
  source(file.path(strategico.home, "strategico_util.R"))
    
  project.name <- ifelse(is.null(POST$project), GET$project, POST$project)

  MySource("strategico_web.R")

  page.title <- " "
  page.sections	<- data.frame()

  if (!is.null(project.name) && !is.null(POST$upload.file) && !is.null(FILES) && !is.null(FILES$project_file)) {
    destination.path <- Project.GetPath(project.name)
    logdebug(paste("Creating project folder", destination.path, "if it does not exists"))
    dir.create(destination.path, showWarnings = FALSE)
    Sys.chmod(destination.path, "777")

    ## TODO
    filename <- paste(project.name, file_ext(FILES$project_file$name), sep=".")
    ##filename <- paste(project.name, "csv", sep=".")
    destination.file <- file.path(destination.path, filename)
    file.copy(FILES$project_file$tmp_name, destination.file, overwrite=TRUE)
    Sys.chmod(destination.file, "777")
  }

  if (!is.null(project.name) && !is.null(POST$import.csv)) {
    n.ahead <- ifelse(is.null(POST$nahead), 4, as.numeric(POST$nahead))
    options <- paste("-a", n.ahead)

    msg <- Strategico.ExecCommand(project.name, cmd="import.csv", options=options, mailto=POST$mailto, intern=TRUE)
  }


  if (!is.null(project.name) && !is.null(POST$run) &&  DB.GetTableNameProjectItems(project.name) %in% strategico.tables) {
    options.base <- "--id.range "
    ## running parallel jobs
    maxid <- Project.GetMaxID(project.name, db.channel=db.channel)
    if (maxid == 0) {
       msg <- "no items found, cannot run..."
    } else {
      id.step <- as.integer(maxid / strategico.config$command.eval.jobs) + 1
      start <- 1
      msg <- ""
      for (c in 1:strategico.config$command.eval.jobs) {
         end <- min(start + id.step, maxid)
         options <- paste(options.base, start, ":", end, sep="")
         msg.new <- Strategico.ExecCommand(project.name, cmd="eval.items", mailto=project.config$mailto, options=options, intern=FALSE)
         msg <- paste(msg, "<br />", msg.new)
         start <- end + 1
      } #end for
    }
  } # end eval.items

  if (!is.null(project.name) && !is.null(POST$export.csv) && DB.GetTableNameProjectItems(project.name) %in% strategico.tables ) {
    msg <- Strategico.ExecCommand(project.name, cmd="export.csv", options="", mailto=project.config$mailto, intern=TRUE)
  }

  if (!is.null(project.name) && !is.null(POST$drop.project)) {
    msg <- Strategico.ExecCommand(project.name, cmd="drop", options="", mailto=project.config$mailto, intern=TRUE)
  }

  if (!is.null(project.name)) {

    exists.csv <- Project.CSVFile.Exist(project.name) 
    exists.config <- Project.ConfigFile.Exist(project.name) 
    ##exists.tables <-DB.GetTableNameProjectItems(project.name) %in% strategico.tables

    b10 <- 'Project: __PROJECT_NAME__ <br />The csv file must have:
          <ul>
           <li>column names KEY1, KEY2, ..., PERIOD, V1, ...</li>
           <li>columns separated by ;</li> 
           <li>decimals with .</li>         
         </ul><br />
       <form enctype="multipart/form-data" method="POST">
       <input name="project.name" type="hidden" value="__PROJECT_NAME__"	 size="10" /> 
       <input type="file" name="project_file" />  <input type="submit" name="upload.file" value="Upload"/><br />'

    b10 <- gsub("__PROJECT_NAME__", ifelse(is.null(project.name), "", project.name), b10)
    page.sections <- rbind(page.sections, data.frame(title="Upload CSV", body=b10))
            
    if (exists.csv) {

      b40 <- 'This step 
        <ul>
           <li>creates the project config file if it does not exist</li>
           <li>creates the database tables</li>
           <li>import CSV data to the database</li>
        </ul>
                   Mail Address: <input name="mailto" type="text" value="" size="20" /><br />
                   Predicted points (n.ahead parameter): <input name="nahead" type="text" value="" size="1" /><br />
                   <input type="submit" name="import.csv" value="Import CSV"/><br />'
      page.sections <- rbind(page.sections, data.frame(title="Import CSV", body=b40))
    
    b1 <- 'Project: __PROJECT_NAME__: see <a href="project-status.brew?project=__PROJECT_NAME__">status</a>'
    b1 <- gsub("__PROJECT_NAME__", ifelse(is.null(project.name), "", project.name), b1)
    page.sections <- rbind(page.sections, data.frame(title="Status", body=b1))

      if (exists.config) {
        b60 <- '                   <input type="submit" name="run" value="Run"/><br />'
        page.sections <- rbind(page.sections, data.frame(title="Run", body=b60))
      }
      if (exists.config) {

        project.values <- Project.GetValues(project.name=name, project.config)

        mylinks <- paste('<a href="suspicious-items.brew?project=', project.name, '&value=', project.values, '">', project.values, '</a>', sep='')

        b70 <- 'Options:  
               <a href="items.brew?project=__PROJECT_NAME__">browser</a> results,  see suspicious items (__LINKS__)'
	b70 <- gsub("__PROJECT_NAME__", ifelse(is.null(project.name), "", project.name), b70)
	b70 <- gsub("__LINKS__", paste(mylinks, collapse=",", sep=" "), b70)

	page.sections <- rbind(page.sections, data.frame(title="Analysis", body=b70))
        b80 <- paste('Press button to export project results to CSV files: ',
                     '<input type="submit" name="export.csv" value="Export"/>',
                     '<br />After that you can <a href=', 
                     strategico.config$projects.url, '/', project.name, ' target="_blank">download here</a> all CSV files. ',
                     sep='')
        page.sections <- rbind(page.sections, data.frame(title="Export CSV", body=b80))

      } ## end exists.config

    b100 <- 'This step will delete this project (database tables and all files). Are you sure??
                   <input type="submit" name="drop.project" value="Drop project"/><br />
                </form>'
    page.sections <- rbind(page.sections, data.frame(title=paste("Drop", project.name), body=b100))

    } ## exists.csv
  }
  template.file <- file.path(GetWebTemplatesHome(), "page.brew")
  brew(template.file)
%>
